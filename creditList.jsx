//Credit List Generator, reading XMP Metadata from all Images. Indesign CS6 or later//(c) 2013 Kai Kasugaiapp.scriptPreferences.version = 8; //Indesign CS6 and later. Use 7.5 to use CS5.5 features//$.level = 2;var myDocument;myDocument = app.documents.item(0);var captionParagraphStyle = myDocument.paragraphStyles.itemByName("Bildunterschrift");var captionedImageObjectStyle = myDocument.objectStyles.itemByName("Bild Umfluss Bounding Box");var xTolerance = 10; //maximum offset of the images to the text frame in Xvar yTolerance = 1; //maximum offset of the images to the text frame in Yvar allInfo = new Array(); //Array with all creditsvar langCreditsName = "Bildnachweis"; //header of credit text framevar creditsParagraphStyleHead; //header paragraph style for credit listvar creditsParagraphStyle; //paragraph style for credit listvar myCreditsTextFrame; //text frame for credits//~ $.writeln(app.selection[0].appliedObjectStyle.name);//~ var test = app.selection[0].graphics[0];//~ $.writeln(app.selection[0].graphics[0].itemLink.name);//~ $.writeln(app.selection[0]);//~ exit();creditsParagraphStyleHead = returnParagraphStyleOrCreatenew("Level 1","Level");creditsParagraphStyle = returnParagraphStyleOrCreatenew("Bildnachweis");//parse ALL TEXTFRAMESfor (var i = 0; i < myDocument.textFrames.count(); i++){    var currentTextFrame = myDocument.textFrames[i];        //parse ALL PARAGRAPHS in CURRENT TEXTFRAME    for (var p = 0; p < currentTextFrame.paragraphs.count(); p++){        var currentParagraph = currentTextFrame.paragraphs[p];        //Found a Paragraph with a caption?        if (currentParagraph.appliedParagraphStyle == captionParagraphStyle){            //Textframe, current Page and top Y Position to compare to images Y Positions on page            var theParentTextFrame = currentParagraph.parentTextFrames[0];            var theParentPage = theParentTextFrame.parentPage;            var topY = theParentTextFrame.geometricBounds[0];            var leftX = theParentTextFrame.geometricBounds[1];            var found = false;            var currentRectangle;            var currentGraphic;            var theInfo;                        //parse ALL RECTANGLES on CURRENT PAGE            for (var r = 0; r < theParentPage.rectangles.count(); r++){                //see if the object style is correct and the X and Y Positions match within set tolerance                currentRectangle = theParentPage.rectangles[r];                if (currentRectangle.appliedObjectStyle == captionedImageObjectStyle) {                    if (currentRectangle.geometricBounds[2] > topY - yTolerance && currentRectangle.geometricBounds[2] < topY + yTolerance) {                        if (currentRectangle.geometricBounds[1] > leftX - xTolerance && currentRectangle.geometricBounds[1] < leftX + xTolerance) {                            found = true;                                                        currentGraphic = currentRectangle.graphics[0].itemLink;                            theInfo = "";                                                        //Copyright                            try{                                theInfo += currentGraphic.linkXmp.copyrightNotice ? "© " + toTitleCase(currentGraphic.linkXmp.copyrightNotice) : "";                                theInfo += currentGraphic.linkXmp.getProperty("http://ns.adobe.com/photoshop/1.0/","photoshop:Credit") ? (theInfo ? ", " : "") + currentGraphic.linkXmp.getProperty("http://ns.adobe.com/photoshop/1.0/","photoshop:Credit") : "";                                theInfo += currentGraphic.linkXmp.getProperty("http://ns.adobe.com/photoshop/1.0/","photoshop:Instructions") ? (theInfo ? ", " : "") + currentGraphic.linkXmp.getProperty("http://ns.adobe.com/photoshop/1.0/","photoshop:Instructions") : "";                            }                            catch(e) {                                theInfo += "ERROR RETREIVING METADATA FOR " + currentGraphic.name;                            }                                                        break;                        }                    }                }            }                    //search GROUPS if nothing has been found            if (!found){                //parse ALL GROUPS on CURRENT PAGE                for (var r = 0; r < theParentPage.groups.count(); r++){                    //see if the object style is correct and the X and Y Positions match within set tolerance                    currentGroup = theParentPage.groups[r];                    if (currentGroup.appliedObjectStyle == captionedImageObjectStyle) {                        if (currentGroup.geometricBounds[2] > topY - yTolerance && currentGroup.geometricBounds[2] < topY + yTolerance) {                            if (currentGroup.geometricBounds[1] > leftX - xTolerance && currentGroup.geometricBounds[1] < leftX + xTolerance) {                                found = true;                                                                theInfo = currentGroup.label;                                                               break;                            }                        }                    }                }            }            allInfo.push("Abbildung " + currentParagraph.numberingResultNumber + "\tSeite " + theParentPage.name + "\t" + (found ? theInfo : "NO IMAGE FOUND") + "");        }    }}allInfo.sort(sortCredits);//$.writeln(allInfo);//NEXT: write user function to sort the text. add tabulators.//CREATE CREDIT LIST TEXT FRAME//find reference text framefor (var i = 0; i < myDocument.pages.count(); i++){    for (var j = 0; j < myDocument.pages[i].textFrames.count(); j++){        if (myDocument.pages[i].textFrames[j].label == 'creditListTextframe'){            myCreditsTextFrame = myDocument.pages[i].textFrames[j];            myCreditsTextFrame.parentStory.contents = "";            addFormattedTextToStory(myCreditsTextFrame,false,(langCreditsName == '' ? " " : langCreditsName),creditsParagraphStyleHead);        }    }}//create new page with textframe for references if none was foundif (!myCreditsTextFrame){    var newPage = myDocument.pages.add();    myCreditsTextFrame = newPage.textFrames.add();    myCreditsTextFrame.label = 'creditListTextframe';    if (newPage.side == PageSideOptions.RIGHT_HAND){        myCreditsTextFrame.geometricBounds = [newPage.marginPreferences.top,newPage.bounds[1] + newPage.marginPreferences.left,newPage.bounds[2] - newPage.marginPreferences.bottom,newPage.bounds[3] - newPage.marginPreferences.right];    } else {        myCreditsTextFrame.geometricBounds = [newPage.marginPreferences.top,newPage.bounds[1] + newPage.marginPreferences.right,newPage.bounds[2] - newPage.marginPreferences.bottom,newPage.bounds[3] - newPage.marginPreferences.left];    }    addFormattedTextToStory(myCreditsTextFrame,false,(langCreditsName == '' ? " " : langCreditsName),creditsParagraphStyleHead);    alert("Page " + (newPage.documentOffset+1) + " was created with the textframe for the credits.\n\nIf you want to define your own credits textframe, please create a textframe with the script-label \"creditListTextframe\" (case sensitive!).\n\nThis textframe (and the parent story) will be emptied and filled with references.");}//enter content into framefor(var i = 0; i < allInfo.length; i++){    addFormattedTextToStory(myCreditsTextFrame,false, "\r",false);    addFormattedTextToStory(myCreditsTextFrame,false, allInfo[i],creditsParagraphStyle);    //myCreditsTextFrame.parentStory.insertionPoints.item(-1).contents = SpecialCharacters.COPYRIGHT_SYMBOL;}function sortCredits(x,y){    var zahlX = x.match(/^[^0-9]*([0-9]+)/);    zahlX = parseInt(zahlX[1]);    var zahlY = y.match(/^[^0-9]*([0-9]+)/);    zahlY = parseInt(zahlY[1]);        return zahlX > zahlY;}function addFormattedTextToStory(myTextframe,myFormat,myContent,myParagraphFormat){    if (!myContent) return false;    //safe insertion point index    var firstInsertionPoint = myTextframe.parentStory.insertionPoints[-1].index;    //add text    myTextframe.parentStory.insertionPoints[-1].contents += myContent;    var myAdditions = myTextframe.parentStory.characters.itemByRange(myTextframe.parentStory.insertionPoints[firstInsertionPoint],myTextframe.parentStory.insertionPoints[-1]);    //add formatting    if (myFormat) {        myAdditions.appliedCharacterStyle = myFormat;    }    if (myParagraphFormat) {        myAdditions.appliedParagraphStyle = myParagraphFormat;    }    return true;}//return the reference to a paragraph style. if the style did not exist, create the stylefunction returnParagraphStyleOrCreatenew(stylename, groupname, stylePreferences){    var style;    var group;    //prepare style preferences. if none are given, only include the name    if (stylePreferences == null){        stylePreferences = {name: stylename};    } else {        stylePreferences.name = stylename;    }        if (!groupname){ //is the style in a group?        style = myDocument.paragraphStyles.item(stylename);    } else {        try { //add group first, if it does not exist            group = myDocument.paragraphStyleGroups.itemByName(groupname);            gname = group.name; //will trigger error if group does not exist        }        catch(e){            group = myDocument.paragraphStyleGroups.add({name: groupname});            style = group.paragraphStyles.add(stylePreferences); //then add style in the group        }        style = group.paragraphStyles.itemByName(stylename); //select style in group (for the second time, if the style had already been created, but that should be ok)    }    try{        name=style.name; //will trigger error if style does not exist    } catch(e) {        if (group != null){            style = group.paragraphStyles.add(stylePreferences);        } else {            style = myDocument.paragraphStyles.add(stylePreferences);        }    }    return style;    }function toTitleCase(str){    return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});}